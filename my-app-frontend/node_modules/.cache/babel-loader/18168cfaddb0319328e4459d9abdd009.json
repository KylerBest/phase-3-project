{"ast":null,"code":"var _jsxFileName = \"/home/kyler/Development/code/mod3/project/my-app-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Catalog from \"./Catalog\";\nimport Cart from \"./Cart\";\nimport OrderHistoryPage from \"./OrderHistoryPage\";\nimport OrderConfirmationPage from \"./OrderConfirmationPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentPage, setCurrentPage] = useState('catalog');\n  const [orderHistory, setOrderHistory] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [cartItems, setCartItems] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:9292/products\").then(r => r.json()).then(products => {\n      setProducts(products);\n      fetch(\"http://localhost:9292/orders\").then(r => r.json()).then(setOrderHistory);\n    }).catch(() => alert(\"ERROR: no connection\"));\n  }, []);\n\n  function modifyCart(product, increaseItem) {\n    const index = cartItems.findIndex(item => item.id === product.id);\n\n    if (index === -1 && increaseItem) {\n      setCartItems([...cartItems, { ...product,\n        quantity: 1\n      }]);\n      return;\n    }\n\n    let newCart = [...cartItems];\n\n    if (increaseItem) {\n      newCart[index].quantity++;\n      setCartItems(newCart);\n    } else {\n      setCartItems(cartItems.filter(item => item.id !== product.id));\n    }\n  }\n\n  function onOrder(_ref) {\n    let {\n      customer_name\n    } = _ref;\n    let getCustomer = null;\n\n    function createOrder() {\n      fetch('http://localhost:9292/orders', {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          customer_id: getCustomer.id\n        })\n      }).then(r => r.json()).then(order => {\n        for (const item of cartItems) {\n          fetch('http://localhost:9292/order_items', {\n            method: \"POST\",\n            headers: {\n              \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              product_id: item.id,\n              order_id: order.id,\n              quantity: item.quantity\n            })\n          }).then(() => {\n            setCartItems([]);\n            changePage();\n          });\n        }\n      });\n    }\n\n    fetch(`http://localhost:9292/customers/${customer_name}`).then(r => r.json()).then(customer => {\n      if (customer) {\n        getCustomer = customer;\n        createOrder();\n      } else {\n        fetch(\"http://localhost:9292/customers\", {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: customer_name\n          })\n        }).then(r => r.json()).then(newCustomer => {\n          getCustomer = newCustomer;\n          createOrder();\n        });\n      }\n    });\n  }\n\n  function cancelOrder(order_id) {\n    fetch(`http://localhost:9292/orders/${order_id}`, {\n      method: \"DELETE\"\n    }).then(r => r.json()).then(deletedOrder => {\n      for (const order_item of deletedOrder.order_items) {\n        fetch(`http://localhost:9292/order_items/${order_item.id}`, {\n          method: \"DELETE\"\n        });\n      }\n    }).then(setOrderHistory(orderHistory.filter(order => order.id !== order_id))).catch(() => alert(\"ERROR: no connection\"));\n  }\n\n  function changePage(page) {\n    setCurrentPage(page);\n  }\n\n  const page = () => {\n    switch (currentPage) {\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main\",\n          children: [/*#__PURE__*/_jsxDEV(Catalog, {\n            products: products,\n            modifyCart: modifyCart\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Cart, {\n            changePage: changePage,\n            modifyCart: modifyCart,\n            cartItems: cartItems\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 16\n        }, this);\n\n      case 'orderHistory':\n        return /*#__PURE__*/_jsxDEV(OrderHistoryPage, {\n          setOrderHistory: setOrderHistory,\n          orderHistory: orderHistory,\n          changePage: changePage,\n          cancelOrder: cancelOrder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 16\n        }, this);\n\n      case 'orderConfirmationPage':\n        return /*#__PURE__*/_jsxDEV(OrderConfirmationPage, {\n          cartItems: cartItems,\n          modifyCart: modifyCart,\n          onOrder: onOrder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 16\n        }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      changePage: changePage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), page()]\n  }, void 0, true);\n}\n\n_s(App, \"K/3wkLM+7FugxLhTCv1H8/Z3lU8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/kyler/Development/code/mod3/project/my-app-frontend/src/App.js"],"names":["React","useState","useEffect","Header","Catalog","Cart","OrderHistoryPage","OrderConfirmationPage","App","currentPage","setCurrentPage","orderHistory","setOrderHistory","products","setProducts","cartItems","setCartItems","fetch","then","r","json","catch","alert","modifyCart","product","increaseItem","index","findIndex","item","id","quantity","newCart","filter","onOrder","customer_name","getCustomer","createOrder","method","headers","body","JSON","stringify","customer_id","order","product_id","order_id","changePage","customer","name","newCustomer","cancelOrder","deletedOrder","order_item","order_items","page"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Header from \"./Header\";\nimport Catalog from \"./Catalog\";\nimport Cart from \"./Cart\";\nimport OrderHistoryPage from \"./OrderHistoryPage\";\nimport OrderConfirmationPage from \"./OrderConfirmationPage\";\n\nfunction App() {\n\n  const [currentPage, setCurrentPage] = useState('catalog')\n  const [orderHistory, setOrderHistory] = useState([])\n  const [products, setProducts] = useState([])\n  const [cartItems, setCartItems] = useState([])\n\n  useEffect(() => {\n    fetch(\"http://localhost:9292/products\")\n      .then(r => r.json())\n      .then(products => {\n        setProducts(products)\n        fetch(\"http://localhost:9292/orders\")\n          .then(r => r.json())\n          .then(setOrderHistory)\n        })\n      .catch(() => alert(\"ERROR: no connection\"))\n  }, [])\n\n  function modifyCart(product, increaseItem){\n    const index = cartItems.findIndex(item => item.id === product.id)\n    if(index === -1 && increaseItem){\n      setCartItems([...cartItems, {...product, quantity: 1}])\n      return\n    }\n    let newCart = [...cartItems]\n    if(increaseItem){\n      newCart[index].quantity++\n      setCartItems(newCart)\n    }else{\n      setCartItems(cartItems.filter(item => item.id !== product.id))\n    }\n  }\n\n  function onOrder({customer_name}){\n    let getCustomer = null\n\n    function createOrder(){\n      fetch('http://localhost:9292/orders', {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          customer_id: getCustomer.id\n        })\n      })\n        .then(r => r.json())\n        .then(order => {\n          for(const item of cartItems){\n            fetch('http://localhost:9292/order_items', {\n              method: \"POST\",\n              headers: {\n                \"Content-type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                product_id: item.id,\n                order_id: order.id,\n                quantity: item.quantity\n              })\n            })\n              .then(() => {\n                setCartItems([])\n                changePage()\n              })\n          }\n        })\n    }\n\n    fetch(`http://localhost:9292/customers/${customer_name}`)\n      .then(r => r.json())\n      .then(customer => {\n        if(customer){\n          getCustomer = customer\n          createOrder()\n        }\n        else {\n          fetch(\"http://localhost:9292/customers\", {\n            method: \"POST\",\n            headers: {\n              \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              name: customer_name\n            })\n          })\n            .then(r => r.json())\n            .then(newCustomer => {\n              getCustomer = newCustomer\n              createOrder()\n            })\n        }\n      })\n  }\n\n  function cancelOrder(order_id){\n    fetch(`http://localhost:9292/orders/${order_id}`, {\n      method: \"DELETE\"\n    })\n      .then(r => r.json())\n      .then(deletedOrder => {\n        for(const order_item of deletedOrder.order_items){\n          fetch(`http://localhost:9292/order_items/${order_item.id}`, {\n            method: \"DELETE\"\n          })\n        }\n      })\n      .then(setOrderHistory(orderHistory.filter(order => order.id !== order_id)))\n      .catch(() => alert(\"ERROR: no connection\"))\n  }\n\n  function changePage(page){\n    setCurrentPage(page)\n  }\n\n  const page = () => {\n    switch(currentPage){\n      default:\n        return <div className=\"main\">\n          <Catalog\n            products={products}\n            modifyCart={modifyCart}\n          />\n          <Cart\n            changePage={changePage}\n            modifyCart={modifyCart}\n            cartItems={cartItems}\n          />\n        </div>\n      case 'orderHistory':\n        return <OrderHistoryPage\n          setOrderHistory={setOrderHistory}\n          orderHistory={orderHistory}\n          changePage={changePage}\n          cancelOrder={cancelOrder}\n        />\n      case 'orderConfirmationPage':\n        return <OrderConfirmationPage\n          cartItems={cartItems}\n          modifyCart={modifyCart}\n          onOrder={onOrder}\n        />\n    }\n  }\n\n  return (\n    <>\n      <Header\n        changePage={changePage}\n      />\n      {\n        page()\n      }\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}