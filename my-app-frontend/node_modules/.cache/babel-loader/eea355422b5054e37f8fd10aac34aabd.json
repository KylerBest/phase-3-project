{"ast":null,"code":"var _jsxFileName = \"/home/kyler/Development/code/mod3/project/my-app-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Catalog from \"./Catalog\";\nimport Cart from \"./Cart\";\nimport OrderHistoryPage from \"./OrderHistoryPage\";\nimport OrderConfirmationPage from \"./OrderConfirmationPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentPage, setCurrentPage] = useState('catalog');\n  const [orderHistory, setOrderHistory] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [cartItems, setCartItems] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:9292/products\").then(r => r.json()).then(products => {\n      setProducts(products);\n    }).then(fetch(\"http://localhost:9292/orders\").then(r => r.json()).then(setOrderHistory)).catch(() => alert(\"ERROR: no connection\"));\n  }, []);\n\n  function onOrder(_ref) {\n    let {\n      customer_name\n    } = _ref;\n    let getCustomer = null;\n\n    function createOrder() {\n      fetch('http://localhost:9292/orders', {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          customer_id: getCustomer.id\n        })\n      }).then(r => r.json()).then(order => {\n        for (const item of cartItems) {\n          fetch('http://localhost:9292/order_items', {\n            method: \"POST\",\n            headers: {\n              \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              product_id: item.id,\n              order_id: order.id,\n              quantity: item.quantity\n            })\n          }).then(() => {\n            setCartItems([]);\n            changePage();\n          });\n        }\n      }).then(() => {});\n    }\n\n    fetch(`http://localhost:9292/customers/${customer_name}`).then(r => r.json()).then(customer => {\n      if (customer) {\n        getCustomer = customer;\n        createOrder();\n      } else {\n        fetch(\"http://localhost:9292/customers\", {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: customer_name\n          })\n        }).then(r => r.json()).then(newCustomer => {\n          getCustomer = newCustomer;\n          createOrder();\n        });\n      }\n    });\n  }\n\n  function cancelOrder(order_id) {\n    fetch(`http://localhost:9292/orders/${order_id}`, {\n      method: \"DELETE\"\n    }).then(setOrderHistory(orderHistory.filter(order => order.id !== order_id))).catch(() => alert(\"ERROR: no connection\"));\n  }\n\n  function changePage(page) {\n    setCurrentPage(page);\n  }\n\n  const page = () => {\n    switch (currentPage) {\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main\",\n          children: [/*#__PURE__*/_jsxDEV(Catalog, {\n            products: products,\n            modifyCart: modifyCart\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Cart, {\n            changePage: changePage,\n            modifyCart: modifyCart,\n            cartItems: cartItems\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 16\n        }, this);\n\n      case 'orderHistory':\n        return /*#__PURE__*/_jsxDEV(OrderHistoryPage, {\n          setOrderHistory: setOrderHistory,\n          orderHistory: orderHistory,\n          changePage: changePage,\n          cancelOrder: cancelOrder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 16\n        }, this);\n\n      case 'orderConfirmationPage':\n        return /*#__PURE__*/_jsxDEV(OrderConfirmationPage, {\n          cartItems: cartItems,\n          modifyCart: modifyCart,\n          onOrder: onOrder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 16\n        }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      changePage: changePage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), page()]\n  }, void 0, true);\n}\n\n_s(App, \"K/3wkLM+7FugxLhTCv1H8/Z3lU8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/kyler/Development/code/mod3/project/my-app-frontend/src/App.js"],"names":["React","useState","useEffect","Header","Catalog","Cart","OrderHistoryPage","OrderConfirmationPage","App","currentPage","setCurrentPage","orderHistory","setOrderHistory","products","setProducts","cartItems","setCartItems","fetch","then","r","json","catch","alert","onOrder","customer_name","getCustomer","createOrder","method","headers","body","JSON","stringify","customer_id","id","order","item","product_id","order_id","quantity","changePage","customer","name","newCustomer","cancelOrder","filter","page","modifyCart"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Header from \"./Header\";\nimport Catalog from \"./Catalog\";\nimport Cart from \"./Cart\";\nimport OrderHistoryPage from \"./OrderHistoryPage\";\nimport OrderConfirmationPage from \"./OrderConfirmationPage\";\n\nfunction App() {\n\n  const [currentPage, setCurrentPage] = useState('catalog')\n  const [orderHistory, setOrderHistory] = useState([])\n  const [products, setProducts] = useState([])\n  const [cartItems, setCartItems] = useState([])\n\n  useEffect(() => {\n    fetch(\"http://localhost:9292/products\")\n      .then(r => r.json())\n      .then(products => {\n        setProducts(products)\n      })\n      .then(\n        fetch(\"http://localhost:9292/orders\")\n          .then(r => r.json())\n          .then(setOrderHistory)\n      )\n      .catch(() => alert(\"ERROR: no connection\"))\n  }, [])\n\n  function onOrder({customer_name}){\n    let getCustomer = null\n\n    function createOrder(){\n      fetch('http://localhost:9292/orders', {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          customer_id: getCustomer.id\n        })\n      })\n        .then(r => r.json())\n        .then(order => {\n          for(const item of cartItems){\n            fetch('http://localhost:9292/order_items', {\n              method: \"POST\",\n              headers: {\n                \"Content-type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                product_id: item.id,\n                order_id: order.id,\n                quantity: item.quantity\n              })\n            })\n              .then(() => {\n                setCartItems([])\n                changePage()\n              })\n          }\n        })\n      .then(() => {\n        \n      })\n    }\n\n    fetch(`http://localhost:9292/customers/${customer_name}`)\n      .then(r => r.json())\n      .then(customer => {\n        if(customer){\n          getCustomer = customer\n          createOrder()\n        }\n        else {\n          fetch(\"http://localhost:9292/customers\", {\n            method: \"POST\",\n            headers: {\n              \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              name: customer_name\n            })\n          })\n            .then(r => r.json())\n            .then(newCustomer => {\n              getCustomer = newCustomer\n              createOrder()\n            })\n        }\n      })\n  }\n\n  function cancelOrder(order_id){\n    fetch(`http://localhost:9292/orders/${order_id}`, {\n      method: \"DELETE\"\n    })\n      .then(setOrderHistory(orderHistory.filter(order => order.id !== order_id)))\n      .catch(() => alert(\"ERROR: no connection\"))\n  }\n\n  function changePage(page){\n    setCurrentPage(page)\n  }\n\n  const page = () => {\n    switch(currentPage){\n      default:\n        return <div className=\"main\">\n          <Catalog\n            products={products}\n            modifyCart={modifyCart}\n          />\n          <Cart\n            changePage={changePage}\n            modifyCart={modifyCart}\n            cartItems={cartItems}\n          />\n        </div>\n      case 'orderHistory':\n        return <OrderHistoryPage\n          setOrderHistory={setOrderHistory}\n          orderHistory={orderHistory}\n          changePage={changePage}\n          cancelOrder={cancelOrder}\n        />\n      case 'orderConfirmationPage':\n        return <OrderConfirmationPage\n          cartItems={cartItems}\n          modifyCart={modifyCart}\n          onOrder={onOrder}\n        />\n    }\n  }\n\n  return (\n    <>\n      <Header\n        changePage={changePage}\n      />\n      {\n        page()\n      }\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}