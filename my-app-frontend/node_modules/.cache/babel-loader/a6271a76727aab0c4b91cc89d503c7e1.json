{"ast":null,"code":"var _jsxFileName = \"/home/kyler/Development/code/mod3/project/my-app-frontend/src/OrderConfirmationPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction OrderConfirmationPage(_ref) {\n  _s();\n\n  let {\n    cart,\n    setCart,\n    updateCart,\n    orderHistory,\n    setOrderHistory,\n    changePage\n  } = _ref;\n  const [name, setName] = useState(\"\");\n\n  async function placeOrder() {\n    let customerPromise = await fetch(`http://localhost:9292/customers/${name}`);\n    let customer = await customerPromise.json();\n\n    if (!customer) {\n      customerPromise = await fetch(`http://localhost:9292/customers`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: name\n        })\n      });\n      customer = await customerPromise.json();\n    }\n\n    let orderPromise = await fetch(`http://localhost:9292/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        customer_id: customer.id\n      })\n    });\n    let order = await orderPromise.json();\n    let orderItemPromises = [];\n\n    for (const product of Object.values(cart)) {\n      orderItemPromises.push(fetch(`http://localhost:9292/order_items`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          product_id: product.id,\n          order_id: order.id,\n          quantity: product.quantity\n        })\n      }));\n    }\n\n    Promise.all(orderItemPromises).then(() => {\n      setOrderHistory([...orderHistory, order]);\n      setCart({});\n      changePage();\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"order-confirmation-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Confirm Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"cart-items\",\n        children: Object.values(cart).map(product => /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"cart-product\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-button\",\n            onClick: () => updateCart(product, -1),\n            children: \"\\u2796\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"remove-button\",\n            onClick: () => updateCart(product, 1),\n            children: \"\\u2795\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this), product.name, \" ($\", parseFloat(product.price).toFixed(2), \")  \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"amount\",\n            children: [\"x\", product.quantity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 87\n          }, this)]\n        }, product.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"total\",\n        children: [\"Total: $\", parseFloat(Object.values(cart).reduce((total, product) => total + product.price * product.quantity, 0)).toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"name-form\",\n        onSubmit: e => e.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          htmlFor: \"name\",\n          children: \"Enter Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"enter-name\",\n          id: \"name\",\n          type: \"text\",\n          placeholder: \"Name Required\",\n          disabled: Object.values(cart).length < 1,\n          onChange: e => setName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: name.length < 1 || Object.values(cart).length < 1,\n      className: \"order-button\",\n      onClick: () => placeOrder(),\n      children: \"Confirm Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(OrderConfirmationPage, \"gFPpQ6rgfiGkmgRsh4q2nIO1W+Q=\");\n\n_c = OrderConfirmationPage;\nexport default OrderConfirmationPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderConfirmationPage\");","map":{"version":3,"sources":["/home/kyler/Development/code/mod3/project/my-app-frontend/src/OrderConfirmationPage.js"],"names":["React","useState","OrderConfirmationPage","cart","setCart","updateCart","orderHistory","setOrderHistory","changePage","name","setName","placeOrder","customerPromise","fetch","customer","json","method","headers","body","JSON","stringify","orderPromise","customer_id","id","order","orderItemPromises","product","Object","values","push","product_id","order_id","quantity","Promise","all","then","map","parseFloat","price","toFixed","reduce","total","e","preventDefault","length","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\n\nfunction OrderConfirmationPage({cart, setCart, updateCart, orderHistory, setOrderHistory, changePage}){\n    const [name, setName] = useState(\"\")\n\n    async function placeOrder(){\n        let customerPromise = await fetch(`http://localhost:9292/customers/${name}`)\n        let customer = await customerPromise.json()\n        if(!customer){\n            customerPromise = await fetch(`http://localhost:9292/customers`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    name: name\n                })\n            })\n            customer = await customerPromise.json()\n        }\n        let orderPromise = await fetch(`http://localhost:9292/orders`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                customer_id: customer.id\n            })\n        })\n        let order = await orderPromise.json()\n        let orderItemPromises = []\n        for(const product of Object.values(cart)){\n            orderItemPromises.push(fetch(`http://localhost:9292/order_items`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    product_id: product.id,\n                    order_id: order.id,\n                    quantity: product.quantity\n                })\n            }))\n        }\n        Promise.all(orderItemPromises).then(() => {\n            setOrderHistory([...orderHistory, order])\n            setCart({})\n            changePage()\n        })\n    }\n\n    return (\n        <div className=\"order-confirmation-page\">\n            <h1>Confirm Order</h1>\n            <div className=\"cart\">\n                <h1>Cart</h1>\n                <ul className=\"cart-items\">\n                    {Object.values(cart).map(product => \n                        <p key={product.id} className=\"cart-product\"> \n                            <button className=\"remove-button\" onClick={() => updateCart(product, -1)}>➖</button>\n                            <button className=\"remove-button\" onClick={() => updateCart(product, 1)}>➕</button>\n                            {product.name} (${parseFloat(product.price).toFixed(2)})  <span className=\"amount\">x{product.quantity}</span> \n                        </p>\n                    )}\n                </ul>\n                <h2 className=\"total\">Total: ${parseFloat(Object.values(cart).reduce((total, product) => total + product.price * product.quantity, 0)).toFixed(2)}</h2>\n                <form className=\"name-form\" onSubmit={e => e.preventDefault()}>\n                    <label \n                        className=\"label\"\n                        htmlFor=\"name\">\n                            Enter Name:\n                    </label>\n                    <input \n                        className=\"enter-name\" \n                        id=\"name\" \n                        type=\"text\"\n                        placeholder=\"Name Required\"\n                        disabled={Object.values(cart).length < 1}\n                        onChange={e => setName(e.target.value)}\n                    />\n                </form>\n            </div>\n            <button \n                disabled={name.length < 1 || Object.values(cart).length < 1} \n                className=\"order-button\"\n                onClick={() => placeOrder()}\n            >\n                Confirm Order\n            </button>\n        </div>\n    )\n}\n\nexport default OrderConfirmationPage"]},"metadata":{},"sourceType":"module"}